from groq import Groq
from PIL import ImageGrab
from openai import OpenAI
from faster_whisper import WhisperModel
import google.generativeai as genai
import speech_recognition as sr
import PIL.Image
import cv2
import pyperclip
import pyaudio
import os
import time
import re
import wave
from pynput import keyboard

wake_word = 'jarvis'
groq_client = Groq(api_key='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')
openai_client = OpenAI(api_key='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')
genai.configure(api_key='AIzaSyDRB_InGl0tXms2Qh15cntRGXn9hUWuGdo')
web_cam = cv2.VideoCapture(0)

sys_msg = (
    'You are a multi-modal AI voice assistant. Your user may or may not have attached a photo for context (either a screenshot or a webcam capture). '
    'Any photo has already been processed into a highly detailed text prompt that will be attached to their transcribed voice prompt. '
    'Generate the most useful and factual response possible, carefully considering all previous generated text in your response before '
    'adding new tokens to the response. Do not expect or request images, just use the context if added. Use all of the context of this '
    'conversation so your response is relevant to the conversation. Make your responses clear and concise, avoiding any verbosity.'
    'Reply only in the language in which you are spoken to. Under no circumstances answer in a diffrent language than the users input language.'
    'incase u are not able to comprehend what the user is saying, ask them to repeat.'
)
convo = [{'role': 'system', 'content': sys_msg}]

# Gemini Flash configuration settings
generation_config = {
    'temperature': 0.7,
    'top_p': 1,
    'top_k': 1,
    'max_output_tokens': 2048,
}

# Remove Gemini safety filters
safety_settings = [
    {
        'category': 'HARM_CATEGORY_HARASSMENT',
        'threshold': 'BLOCK_NONE'
    },
    {
        'category': 'HARM_CATEGORY_HATE_SPEECH',
        'threshold': 'BLOCK_NONE'
    },
    {
        'category': 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        'threshold': 'BLOCK_NONE'
    },
    {
        'category': 'HARM_CATEGORY_DANGEROUS_CONTENT',
        'threshold': 'BLOCK_NONE'
    },
]

model = genai.GenerativeModel('gemini-1.5-flash-latest',
                            generation_config=generation_config,
                            safety_settings=safety_settings)

num_cores = os.cpu_count()
whisper_size = 'large-v2'
whisper_model = WhisperModel(
    whisper_size,
    device='cpu',
    compute_type='int8',
    cpu_threads=num_cores // 2,
    num_workers=num_cores // 2
)

# Audio recording settings
CHUNK = 1024
FORMAT = pyaudio.paInt16
CHANNELS = 1
RATE = 44100

# Global state
recording = False
frames = []
audio_stream = None
p = None

def groq_prompt(prompt, img_context):
    if img_context:
        prompt = f'USER PROMPT: {prompt}\n\n    IMAGE CONTEXT: {img_context}'
    convo.append({'role': 'user', 'content': prompt})
    chat_completion = groq_client.chat.completions.create(messages=convo, model='llama3-70b-8192')
    response = chat_completion.choices[0].message
    convo.append(response)
    
    return response.content

def function_call(prompt):
    sys_msg = (
        'You are an AI function calling model. You will determine whether extracting the users clipboard content, taking a screenshot, capturing the '
        'webcam or calling no functions is best for a voice assistant to respond to the users prompt. The webcam can be assumed to be a normal laptop webcam '
        'facing the user. You will respond with only one selection from this list: ["extract clipboard", "take screenshot", "capture webcam", "None"] \n'
        'Do not respond with anything but the most logical selection from that list with no explanations. Format the function call name exactly as I listed.'
    )
    
    function_convo = [{'role': 'system', 'content': sys_msg},
                      {'role': 'user', 'content': prompt}]
    
    chat_completion = groq_client.chat.completions.create(messages=function_convo, model='llama3-70b-8192')
    response = chat_completion.choices[0].message
    
    return response.content

def vision_prompt(prompt, photo_path):
    img = PIL.Image.open(photo_path)
    prompt = (
        'You are the vision analysis AI that provides semtantic meaning from images to provide context to send to another AI that will create a response to the user. '
        'Do not respond as the AI assistant to the user. Instead take the user prompt input and try to extract all meaning from the photo relevant to the user prompt. '
        f'Then generate as much objective data about the image for the AI assistant who will respond to the user. \nUSER PROMPT: {prompt}'
    )
    response = model.generate_content([prompt, img])
    return response.text

def take_screenshot():
    path = 'screenshot.jpg'
    screenshot = ImageGrab.grab()
    rgb_screenshot = screenshot.convert('RGB')
    rgb_screenshot.save(path, quality=15)
    
"""def web_cam_capture():
    if not web_cam.isOpened():
        print('Error: Unable to open camera')
        exit()    
    path = 'webcam.jpg'
    ret, frame = web_cam.read()
    cv2.imwrite(path, frame)"""

def web_cam_capture():
    port = 0
    ramp_frames = 30
    resolution = (1920, 1080)
    path = "webcam.jpg"

    camera = cv2.VideoCapture(port)
    if not camera.isOpened():
        print("Error: Could not open webcam")
        return False

    camera.set(cv2.CAP_PROP_FRAME_WIDTH, resolution[0])
    camera.set(cv2.CAP_PROP_FRAME_HEIGHT, resolution[1])

    for _ in range(ramp_frames):
        camera.read()

    ret, frame = camera.read()
    if not ret:
        print("Error: Could not capture frame")
        camera.release()
        return False

    alpha = 1 # Contrast control (1.0-3.0)
    beta = 15 # Brightness control (0-100)

    enhanced_frame = cv2.convertScaleAbs(frame, alpha=alpha, beta=beta)

    cv2.imwrite(path, enhanced_frame)

    camera.release()
    return True
    
def get_clipboard_text():
    try:
        clipboard_content = pyperclip.paste()
        if isinstance(clipboard_content, str):
            return clipboard_content
        else:
            print("Clipboard content is not text.")
            return None
    except Exception as e:
        print(f"An error occurred: {e}")
        return None 
    
def speak(text):
    player_stream = pyaudio.PyAudio().open(format=pyaudio.paInt16, channels=1, rate=24000, output=True)
    stream_start = False

    with openai_client.audio.speech.with_streaming_response.create(
        model='tts-1',
        voice='alloy',
        response_format='pcm',  
        input=text,
    ) as response:
        silence_threshold = 0.01
        for chunk in response.iter_bytes(chunk_size=1024):
            if stream_start:
                player_stream.write(chunk)
            else:
                if max(chunk) > silence_threshold:
                    player_stream.write(chunk)
                    stream_start = True

def start_recording():
    global recording, frames, audio_stream, p
    if not recording:
        frames = []
        p = pyaudio.PyAudio()
        audio_stream = p.open(format=FORMAT,
                            channels=CHANNELS,
                            rate=RATE,
                            input=True,
                            frames_per_buffer=CHUNK)
        recording = True
        print("Recording... Press Enter to stop.")

def stop_recording():
    global recording, audio_stream, p, frames
    if recording:
        recording = False
        audio_stream.stop_stream()
        audio_stream.close()
        p.terminate()
        
        # Save the recorded audio
        audio_path = "prompt.wav"
        wf = wave.open(audio_path, 'wb')
        wf.setnchannels(CHANNELS)
        wf.setsampwidth(p.get_sample_size(FORMAT))
        wf.setframerate(RATE)
        wf.writeframes(b''.join(frames))
        wf.close()
        
        return audio_path

def on_press(key):
    global recording, frames, audio_stream
    try:
        if key == keyboard.Key.space and not recording:
            start_recording()
        elif key == keyboard.Key.enter and recording:
            audio_path = stop_recording()
            prompt_text = wav_to_text(audio_path)
            process_prompt(prompt_text)
            print("\nPress Space to record another prompt.")
    except AttributeError:
        pass

def on_release(key):
    pass

def wav_to_text(audio_path):
    segments, _ = whisper_model.transcribe(audio_path)
    text = ''.join(segment.text for segment in segments)
    return text

def process_prompt(prompt_text):
    clean_prompt = prompt_text.strip()
    print(f'USER: {clean_prompt}')
    
    call = function_call(clean_prompt)
    if 'take screenshot' in call:
        print('Taking screenshot.')
        take_screenshot()
        visual_context = vision_prompt(prompt=clean_prompt, photo_path='screenshot.jpg')
    elif 'capture webcam' in call:
        print('Capturing webcam.')
        web_cam_capture()
        visual_context = vision_prompt(prompt=clean_prompt, photo_path='webcam.jpg')
    elif 'extract clipboard' in call:
        print('Extracting clipboard text.')
        paste = get_clipboard_text()
        clean_prompt = f'{clean_prompt} \n\n  CLIPBOARD CONTENT: {paste}'
        visual_context = None
    else:
        visual_context = None
    
    response = groq_prompt(prompt=clean_prompt, img_context=visual_context)
    print(f'ASSISTANT: {response}')
    speak(response)

def record_audio_loop():
    global recording, frames, audio_stream
    while recording:
        data = audio_stream.read(CHUNK)
        frames.append(data)
        time.sleep(0.001)

def main():
    print("Press Space to start recording, Enter to stop recording and process the prompt.")
    
    # Set up the keyboard listener
    with keyboard.Listener(on_press=on_press, on_release=on_release) as listener:
        while True:
            if recording:
                record_audio_loop()
            time.sleep(0.1)

if _name_ == '_main_':
    main()
